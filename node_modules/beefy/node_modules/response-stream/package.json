{
  "name": "response-stream",
  "version": "0.0.0",
  "description": "pass http server response methods through to the next destination pipe",
  "main": "index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "devDependencies": {
    "tap": "~0.3.0",
    "event-stream": "~3.0.2",
    "filed": "git://github.com/substack/filed.git#return_dest"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/response-stream.git"
  },
  "homepage": "https://github.com/substack/response-stream",
  "keywords": [
    "http",
    "response",
    "res",
    "pipe",
    "stream",
    "server"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# response-stream\n\nPass http server response methods through to the next destination pipe.\n\nThis is useful if you want to write duplex streams that will be piped into an\nhttp server response (`.pipe(res)`).\n\n[![build status](https://secure.travis-ci.org/substack/response-stream.png)](http://travis-ci.org/substack/response-stream)\n\n# example\n\n``` js\nvar http = require('http');\nvar es = require('event-stream');\nvar filed = require('filed');\nvar responseStream = require('response-stream');\n\nvar server = http.createServer(function (req, res) {\n    filed(__dirname + '/data.txt')\n        .pipe(capStream())\n        .pipe(res)\n    ;\n});\nserver.listen(8000);\n\nfunction capStream () {\n    return responseStream(es.mapSync(function (s) {\n        return String(s).toUpperCase()\n    }));\n}\n```\nnow our stream works plus we get all the nifty http headers from\n[filed](http://github.com/mikeal/filed):\n\n```\n$ curl -i localhost:8000\nHTTP/1.1 200 OK\ncontent-type: text/plain\netag: f11d6d78081ea6d84ce2592001e9b510\nlast-modified: Tue, 28 Aug 2012 19:01:19 -0700\ncontent-length: 10\nConnection: keep-alive\n\nBEEP BOOP\n```\n\n# methods\n\n``` js\nvar responseStream = require('response-stream')\n```\n\n## var rs = responseStream(stream)\n\nReturn a new [duplex stream](http://github.com/substack/stream-handbook#duplex)\nfrom `stream` with all of the http server response methods that will be passed\nthrough to the destination response object.\n\n# events\n\n## rs.on('response', res)\n\nEmitted after when the response object is available. All of the proxied methods\nwill be passed through before this event fires\n\n## rs.on(method, args, prevent)\n\nFor each `method`: `'writeContinue'`, `'writeHead'`, `'setHeader'`,\n`'sendDate'`, `'getHeader'`, `'removeHeader'`, `'addTrailers'`\n\ncorresponding to the http server response method, emit an event before the\nmethod is called on the actual response or saved with the arguments and a\n`prevent()` function that prevents passing the method call back to the response\nobject.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install response-stream\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "_id": "response-stream@0.0.0",
  "_from": "response-stream@0.0.0"
}
