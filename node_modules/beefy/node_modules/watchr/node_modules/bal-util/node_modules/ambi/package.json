{
  "name": "ambi",
  "version": "2.0.0",
  "description": "Execute a function ambidextrously (normalizes the differences between synchronous and asynchronous functions). Useful for treating synchronous functions as asynchronous functions (like supporting both synchronous and asynchronous event definitions automatically).",
  "homepage": "https://github.com/bevry/ambi",
  "keywords": [
    "sync",
    "async",
    "fire",
    "exec",
    "execute",
    "ambidextrous"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/ambi/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/ambi.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "typechecker": "~2.0.1"
  },
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.1.2",
    "chai": "~1.5.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/ambi-test.js"
  },
  "main": "./out/lib/ambi.js",
  "readme": "# Ambi [![Build Status](https://secure.travis-ci.org/bevry/ambi.png?branch=master)](http://travis-ci.org/bevry/ambi)\nExecute a function ambidextrously (normalizes the differences between synchronous and asynchronous functions).\nUseful for treating synchronous functions as asynchronous functions (like supporting both synchronous and asynchronous event definitions automatically).\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save ambi`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org)\n\n\n\n## Usage\n\n``` javascript\n// Import\nvar ambi = require('ambi')\nvar result\n\n// Sample methods\nvar syncMethod = function(x,y){\n\treturn x*y\n}\nvar asyncMethod = function(x,y,next){\n\treturn setTimeout(function(){\n\t\tnext(null,x*y)\n\t},0)\n}\n\n// Call the synchronous function asynchronously\nresult = ambi(syncMethod, 5, 2, function(err,result){ // ambi adds support for this asynchronous callback automatically\n\tconsole.log(err, result) // null, 10\n})\nconsole.log(result) // 10 - just like normal\n\n// Call the asynchronous function asynchronously\nresult = ambi(asyncMethod, 5, 2, function(err,result){ // ambi doesn't do anything special here\n\tconsole.log(err, result) // null, 10\n})\nconsole.log(result) // setTimeout - just like normal\n```\n\n\n\n## Process\n\n- Ambi accepts the arguments `(method, args...)`\n\t- `method` is the function to execute\n\t- `args...` is the arguments to send to the method\n\t\t- the last argument is expected to be the completion callback\n\t\t- the completion callback is optional, but if defined, is expected to have the signature of `(err, results...)`\n- If the method has the same amount of arguments as those ambi received, then we assume it is an asynchronous method and let it handle calling of the completion callback itself\n- If the method does not have the same amount of arguments as those ambi received, then we assume it is a synchronous method and we'll call the completion callback ourselves\n\t- If the synchronous method throws an error or returns an error, we'll try to call the completion callback with a single `err` argument\n\t- If the synchronous method executes without error, we'll try to call the completion callback with a `err` argument equal to null, and a `result` argument equal to the returned result of the synchronous method\n- Ambi can also introspect a different method than the one it fires, by passing `[methodToFire, methodToIntrospect]` as the `method` argument\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/ambi/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "ambi@2.0.0",
  "_from": "ambi@~2.0.0"
}
