// Generated by CoffeeScript 1.6.2
var TaskGroup, balUtilFlow, balUtilModules, isWindows, safefs, typeChecker, _base, _ref, _ref1, _ref2, _ref3,
  __slice = [].slice;

balUtilModules = null;

TaskGroup = require('taskgroup').TaskGroup;

typeChecker = require('typechecker');

safefs = require('safefs');

balUtilFlow = require('./flow');

isWindows = (typeof process !== "undefined" && process !== null ? (_ref = process.platform) != null ? _ref.indexOf('win') : void 0 : void 0) === 0;

if ((_ref1 = global.safepsGlobal) == null) {
  global.safepsGlobal = {};
}

if ((_ref2 = (_base = global.safepsGlobal).pool) == null) {
  _base.pool = new TaskGroup().setConfig({
    concurrency: (_ref3 = process.env.NODE_MAX_OPEN_PROCESSES) != null ? _ref3 : 100,
    pauseOnError: false
  }).run();
}

balUtilModules = {
  openProcess: function(fn) {
    global.safepsGlobal.pool.addTask(fn);
    return balUtilModules;
  },
  closeFile: function() {
    console.log('safeps.closeFile has been deprecated, please use the safeps.openFile completion callback to close files');
    return balUtilModules;
  },
  requireFresh: function(path) {
    var result;

    path = require('path').resolve(path);
    delete require.cache[path];
    result = require(path);
    delete require.cache[path];
    return result;
  },
  isWindows: function() {
    return isWindows;
  },
  getLocaleCode: function(lang) {
    var localeCode;

    if (lang == null) {
      lang = null;
    }
    if (lang == null) {
      lang = process.env.LANG || '';
    }
    localeCode = lang.replace(/\..+/, '').replace('-', '_').toLowerCase() || null;
    return localeCode;
  },
  getLanguageCode: function(localeCode) {
    var languageCode;

    if (localeCode == null) {
      localeCode = null;
    }
    localeCode = balUtilModules.getLocaleCode(localeCode) || '';
    languageCode = localeCode.replace(/^([a-z]+)[_-]([a-z]+)$/i, '$1').toLowerCase() || null;
    return languageCode;
  },
  getCountryCode: function(localeCode) {
    var countryCode;

    if (localeCode == null) {
      localeCode = null;
    }
    localeCode = balUtilModules.getLocaleCode(localeCode) || '';
    countryCode = localeCode.replace(/^([a-z]+)[_-]([a-z]+)$/i, '$2').toLowerCase() || null;
    return countryCode;
  },
  spawn: function(command, opts, next) {
    balUtilModules.openProcess(function(closeProcess) {
      var err, pid, spawn, stderr, stdout, _ref4;

      spawn = require('child_process').spawn;
      _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
      pid = null;
      err = null;
      stdout = '';
      stderr = '';
      if (typeChecker.isString(command)) {
        command = command.split(' ');
      }
      if (typeChecker.isArray(command)) {
        command = {
          command: command[0],
          args: command.slice(1),
          options: opts
        };
      }
      pid = spawn(command.command, command.args || [], command.options || opts);
      pid.stdout.on('data', function(data) {
        if (opts.output) {
          process.stdout.write(data);
        }
        return stdout += data.toString();
      });
      pid.stderr.on('data', function(data) {
        if (opts.output) {
          process.stderr.write(data);
        }
        return stderr += data.toString();
      });
      pid.on('exit', function(code, signal) {
        err = null;
        if (code !== 0) {
          err = new Error(stderr || 'exited with a non-zero status code');
        }
        closeProcess();
        return next(err, stdout, stderr, code, signal);
      });
      if (opts.stdin) {
        pid.stdin.write(opts.stdin);
        return pid.stdin.end();
      }
    });
    return this;
  },
  spawnMultiple: function(commands, opts, next) {
    var concurrency, results, tasks, _ref4;

    _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
    opts.tasksMode || (opts.tasksMode = 'serial');
    results = [];
    concurrency = opts.tasksMode === 'serial' ? 1 : 0;
    tasks = new TaskGroup().setConfig({
      concurrency: concurrency
    }).once('complete', function(err) {
      return next(err, results);
    });
    if (!typeChecker.isArray(commands)) {
      commands = [commands];
    }
    commands.forEach(function(command) {
      return tasks.addTask(function(complete) {
        return balUtilModules.spawn(command, opts, function() {
          var args, err;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          err = args[0] || null;
          results.push(args);
          return complete(err);
        });
      });
    });
    tasks.run();
    return this;
  },
  spawnCommand: function(command, args, opts, next) {
    if (args == null) {
      args = [];
    }
    balUtilModules.getExecPath(command, function(err, execPath) {
      var pieces;

      if (err) {
        return next(err);
      }
      pieces = [execPath].concat(args);
      return balUtilModules.spawn(pieces, opts, next);
    });
    return this;
  },
  spawnCommands: function(command, multiArgs, opts, next) {
    if (multiArgs == null) {
      multiArgs = [];
    }
    balUtilModules.getExecPath(command, function(err, execPath) {
      var args, pieces, _i, _len;

      if (err) {
        return next(err);
      }
      pieces = [];
      for (_i = 0, _len = multiArgs.length; _i < _len; _i++) {
        args = multiArgs[_i];
        pieces.push([execPath].concat(args));
      }
      return balUtilModules.spawnMultiple(pieces, opts, next);
    });
    return this;
  },
  exec: function(command, opts, next) {
    balUtilModules.openProcess(function(closeProcess) {
      var exec, _ref4;

      exec = require('child_process').exec;
      _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
      if (opts.output) {
        opts.stdio = 'inherit';
        delete opts.output;
      }
      return exec(command, opts, function(err, stdout, stderr) {
        closeProcess();
        return next(err, stdout, stderr);
      });
    });
    return this;
  },
  execMultiple: function(commands, opts, next) {
    var concurrency, results, tasks, _ref4;

    _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
    opts.tasksMode || (opts.tasksMode = 'serial');
    results = [];
    concurrency = opts.tasksMode === 'serial' ? 1 : 0;
    tasks = new TaskGroup().setConfig({
      concurrency: concurrency
    }).once('complete', function(err) {
      return next(err, results);
    });
    if (!typeChecker.isArray(commands)) {
      commands = [commands];
    }
    commands.forEach(function(command) {
      return tasks.addTask(function(complete) {
        return balUtilModules.exec(this.command, opts, function() {
          var args, err;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          err = args[0] || null;
          results.push(args);
          return complete(err);
        });
      });
    });
    tasks.run();
    return this;
  },
  determineExecPath: function(possibleExecPaths, next) {
    var execPath, pathUtil, tasks;

    pathUtil = require('path');
    execPath = null;
    tasks = new TaskGroup().once('complete', function(err) {
      return next(err, execPath);
    });
    possibleExecPaths.forEach(function(possibleExecPath) {
      if (!possibleExecPath) {
        return;
      }
      return tasks.addTask(function(complete) {
        if (execPath) {
          return complete();
        }
        possibleExecPath = pathUtil.resolve(possibleExecPath);
        return safefs.exists(possibleExecPath, function(exists) {
          if (!exists) {
            return complete();
          }
          return balUtilModules.spawn([possibleExecPath, '--version'], {
            env: process.env
          }, function(err, stdout, stderr, code, signal) {
            if (err) {
              return complete();
            }
            execPath = possibleExecPath;
            return complete();
          });
        });
      });
    });
    tasks.run();
    return this;
  },
  getEnvironmentPaths: function() {
    var environmentPaths;

    if (balUtilModules.isWindows()) {
      environmentPaths = process.env.PATH.split(/;/g);
    } else {
      environmentPaths = process.env.PATH.split(/:/g);
    }
    return environmentPaths;
  },
  getStandardExecPaths: function(execName) {
    var index, possibleExecPaths, value, _i, _len;

    possibleExecPaths = [process.cwd()].concat(balUtilModules.getEnvironmentPaths());
    for (index = _i = 0, _len = possibleExecPaths.length; _i < _len; index = ++_i) {
      value = possibleExecPaths[index];
      possibleExecPaths[index] = value.replace(/\/$/, '');
    }
    if (execName) {
      possibleExecPaths = balUtilFlow.suffixArray("/" + execName, possibleExecPaths);
    }
    return possibleExecPaths;
  },
  getExecPath: function(execName, next) {
    var execNameCapitalized, getExecMethodName, possibleExecPaths;

    execNameCapitalized = execName[0].toUpperCase() + execName.substr(1);
    getExecMethodName = 'get' + execNameCapitalized + 'Path';
    if (balUtilModules[getExecMethodName] != null) {
      balUtilModules[getExecMethodName](next);
    } else {
      if (isWindows && execName.indexOf('.') === -1) {
        possibleExecPaths = balUtilModules.getStandardExecPaths(execName + '.exe').concat(balUtilModules.getStandardExecPaths(execName));
      } else {
        possibleExecPaths = balUtilModules.getStandardExecPaths(execName);
      }
      balUtilModules.determineExecPath(possibleExecPaths, next);
    }
    return this;
  },
  getHomePath: function(next) {
    var homePath;

    if (balUtilModules.cachedHomePath != null) {
      next(null, balUtilModules.cachedHomePath);
      return this;
    }
    homePath = process.env.USERPROFILE || process.env.HOME;
    homePath || (homePath = null);
    balUtilModules.cachedHomePath = homePath;
    next(null, homePath);
    return this;
  },
  getTmpPath: function(next) {
    var pathUtil, tmpDirName, tmpPath;

    if (balUtilModules.cachedTmpPath != null) {
      next(null, balUtilModules.cachedTmpPath);
      return this;
    }
    pathUtil = require('path');
    tmpDirName = isWindows ? 'temp' : 'tmp';
    tmpPath = process.env.TMPDIR || process.env.TMP || process.env.TEMP;
    if (!tmpPath) {
      balUtilModules.getHomePath(function(err, homePath) {
        if (err) {
          return next(err);
        }
        tmpPath = pathUtil.resolve(homePath, tmpDirName);
        if (!tmpPath) {
          return tmpPath = isWindows ? pathUtil.resolve(process.env.windir || 'C:\\Windows', tmpDirName) : '/tmp';
        }
      });
    }
    tmpPath || (tmpPath = null);
    balUtilModules.cachedTmpPath = tmpPath;
    next(null, tmpPath);
    return this;
  },
  getGitPath: function(next) {
    var execName, possibleExecPaths;

    if (balUtilModules.cachedGitPath != null) {
      next(null, balUtilModules.cachedGitPath);
      return this;
    }
    execName = isWindows ? 'git.exe' : 'git';
    possibleExecPaths = [process.env.GIT_PATH, process.env.GITPATH].concat(balUtilModules.getStandardExecPaths(execName)).concat(isWindows ? ["/Program Files (x64)/Git/bin/" + execName, "/Program Files (x86)/Git/bin/" + execName, "/Program Files/Git/bin/" + execName] : ["/usr/local/bin/" + execName, "/usr/bin/" + execName, "~/bin/" + execName]);
    balUtilModules.determineExecPath(possibleExecPaths, function(err, execPath) {
      balUtilModules.cachedGitPath = execPath;
      if (err) {
        return next(err);
      }
      if (!execPath) {
        return next(new Error('Could not locate git binary'));
      }
      return next(null, execPath);
    });
    return this;
  },
  getNodePath: function(next) {
    var execName, possibleExecPaths;

    if (balUtilModules.cachedNodePath != null) {
      next(null, balUtilModules.cachedNodePath);
      return this;
    }
    execName = isWindows ? 'node.exe' : 'node';
    possibleExecPaths = [process.env.NODE_PATH, process.env.NODEPATH, (/node(.exe)?$/.test(process.execPath) ? process.execPath : '')].concat(balUtilModules.getStandardExecPaths(execName)).concat(isWindows ? ["/Program Files (x64)/nodejs/" + execName, "/Program Files (x86)/nodejs/" + execName, "/Program Files/nodejs/" + execName] : ["/usr/local/bin/" + execName, "/usr/bin/" + execName, "~/bin/" + execName]);
    balUtilModules.determineExecPath(possibleExecPaths, function(err, execPath) {
      balUtilModules.cachedNodePath = execPath;
      if (err) {
        return next(err);
      }
      if (!execPath) {
        return next(new Error('Could not locate node binary'));
      }
      return next(null, execPath);
    });
    return this;
  },
  getNpmPath: function(next) {
    var execName, possibleExecPaths;

    if (balUtilModules.cachedNpmPath != null) {
      next(null, balUtilModules.cachedNpmPath);
      return this;
    }
    execName = isWindows ? 'npm.cmd' : 'npm';
    possibleExecPaths = [process.env.NPM_PATH, process.env.NPMPATH, (/node(.exe)?$/.test(process.execPath) ? process.execPath.replace(/node(.exe)?$/, execName) : '')].concat(balUtilModules.getStandardExecPaths(execName)).concat(isWindows ? ["/Program Files (x64)/nodejs/" + execName, "/Program Files (x86)/nodejs/" + execName, "/Program Files/nodejs/" + execName] : ["/usr/local/bin/" + execName, "/usr/bin/" + execName, "~/node_modules/.bin/" + execName]);
    balUtilModules.determineExecPath(possibleExecPaths, function(err, execPath) {
      balUtilModules.cachedNpmPath = execPath;
      if (err) {
        return next(err);
      }
      if (!execPath) {
        return next(new Error('Could not locate npm binary'));
      }
      return next(null, execPath);
    });
    return this;
  },
  initGitRepo: function(opts, next) {
    var branch, commands, log, output, path, remote, url, _ref4;

    _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
    path = opts.path, remote = opts.remote, url = opts.url, branch = opts.branch, log = opts.log, output = opts.output;
    remote || (remote = 'origin');
    branch || (branch = 'master');
    commands = [['init'], ['remote', 'add', remote, url], ['fetch', remote], ['pull', remote, branch], ['submodule', 'init'], ['submodule', 'update', '--recursive']];
    if (typeof log === "function") {
      log('debug', "Initializing git repo with url [" + url + "] on directory [" + path + "]");
    }
    balUtilModules.spawnCommands('git', commands, {
      cwd: path,
      output: output
    }, function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args[0] != null) {
        return next.apply(null, args);
      }
      if (typeof log === "function") {
        log('debug', "Initialized git repo with url [" + url + "] on directory [" + path + "]");
      }
      return next.apply(null, args);
    });
    return this;
  },
  initOrPullGitRepo: function(opts, next) {
    var branch, path, remote, _ref4,
      _this = this;

    _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
    path = opts.path, remote = opts.remote, branch = opts.branch;
    remote || (remote = 'origin');
    branch || (branch = 'master');
    safefs.ensurePath(path, function(err, exists) {
      if (err) {
        return complete(err);
      }
      if (exists) {
        opts.cwd = path;
        return balUtilModules.spawnCommand('git', ['pull', remote, branch], opts, next);
      } else {
        return balUtilModules.initGitRepo(opts, next);
      }
    });
    return this;
  },
  initNodeModules: function(opts, next) {
    var force, log, nodeModulesPath, packageJsonPath, partTwo, path, pathUtil, _ref4;

    pathUtil = require('path');
    _ref4 = balUtilFlow.extractOptsAndCallback(opts, next), opts = _ref4[0], next = _ref4[1];
    path = opts.path, log = opts.log, force = opts.force;
    opts.cwd = path;
    packageJsonPath = pathUtil.join(path, 'package.json');
    nodeModulesPath = pathUtil.join(path, 'node_modules');
    partTwo = function() {
      return safefs.exists(packageJsonPath, function(exists) {
        var command;

        if (!exists) {
          return next();
        }
        command = ['install'];
        if (force) {
          command.push('--force');
        }
        if (typeof log === "function") {
          log('debug', "Initializing node modules\non:   " + dirPath + "\nwith:", command);
        }
        return balUtilModules.spawnCommand('npm', command, opts, function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (args[0] != null) {
            return next.apply(null, args);
          }
          if (typeof log === "function") {
            log('debug', "Initialized node modules\non:   " + dirPath + "\nwith:", command);
          }
          return next.apply(null, args);
        });
      });
    };
    if (force === false) {
      safefs.exists(nodeModulesPath, function(exists) {
        if (exists) {
          return next();
        }
        return partTwo();
      });
    } else {
      partTwo();
    }
    return this;
  }
};

module.exports = balUtilModules;
