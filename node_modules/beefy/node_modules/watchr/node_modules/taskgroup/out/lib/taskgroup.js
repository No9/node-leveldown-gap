// Generated by CoffeeScript 1.6.2
var EventEmitter, Task, TaskGroup, ambi,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

ambi = require('ambi');

EventEmitter = require('eventemitter2').EventEmitter2;

Task = (function(_super) {
  __extends(Task, _super);

  Task.prototype.type = 'task';

  Task.prototype.result = null;

  Task.prototype.running = false;

  Task.prototype.parent = null;

  Task.prototype.name = null;

  Task.prototype.fn = null;

  Task.prototype.args = null;

  function Task() {
    var args, fn, name;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.setConfig = __bind(this.setConfig, this);
    Task.__super__.constructor.apply(this, arguments);
    name = fn = null;
    if (args.length) {
      if (args.length === 2) {
        name = args[0], fn = args[1];
      } else if (args.length === 1) {
        fn = args[0];
      }
    }
    this.setConfig({
      name: name,
      fn: fn
    });
    this;
  }

  Task.prototype.setConfig = function(opts) {
    var key, value;

    if (opts == null) {
      opts = {};
    }
    for (key in opts) {
      if (!__hasProp.call(opts, key)) continue;
      value = opts[key];
      this[key] = value;
    }
    return this;
  };

  Task.prototype.run = function() {
    var complete,
      _this = this;

    complete = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _this.running = false;
      _this.result = args;
      return _this.complete();
    };
    this.running = true;
    this.emit('run');
    process.nextTick(function() {
      var args;

      args = (_this.args || []).concat([complete]);
      return ambi.apply(null, [_this.fn.bind(_this)].concat(__slice.call(args)));
    });
    return this;
  };

  Task.prototype.complete = function() {
    var completed;

    completed = (this.result != null) && this.running === false;
    if (completed) {
      this.emit.apply(this, ['complete'].concat(__slice.call(this.result)));
    }
    return completed;
  };

  return Task;

})(EventEmitter);

TaskGroup = (function(_super) {
  __extends(TaskGroup, _super);

  TaskGroup.prototype.type = 'taskgroup';

  TaskGroup.prototype.running = 0;

  TaskGroup.prototype.remaining = null;

  TaskGroup.prototype.err = null;

  TaskGroup.prototype.results = null;

  TaskGroup.prototype.parent = null;

  TaskGroup.prototype.paused = true;

  TaskGroup.prototype.name = null;

  TaskGroup.prototype.fn = null;

  TaskGroup.prototype.concurrency = 1;

  TaskGroup.prototype.pauseOnError = true;

  function TaskGroup() {
    var args, fn, name,
      _this = this;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.run = __bind(this.run, this);
    this.pause = __bind(this.pause, this);
    this.exit = __bind(this.exit, this);
    this.stop = __bind(this.stop, this);
    this.clear = __bind(this.clear, this);
    this.complete = __bind(this.complete, this);
    this.nextItem = __bind(this.nextItem, this);
    this.nextItems = __bind(this.nextItems, this);
    this.isReady = __bind(this.isReady, this);
    this.hasItems = __bind(this.hasItems, this);
    this.addGroup = __bind(this.addGroup, this);
    this.createGroup = __bind(this.createGroup, this);
    this.addTask = __bind(this.addTask, this);
    this.createTask = __bind(this.createTask, this);
    this.addItem = __bind(this.addItem, this);
    this.setConfig = __bind(this.setConfig, this);
    TaskGroup.__super__.constructor.apply(this, arguments);
    this.err = null;
    this.results = [];
    this.remaining = [];
    name = fn = null;
    if (args.length) {
      if (args.length === 2) {
        name = args[0], fn = args[1];
      } else if (args.length === 1) {
        fn = args[0];
      }
    }
    this.setConfig({
      name: name,
      fn: fn
    });
    process.nextTick(function() {
      if (_this.fn) {
        args = [_this.addGroup, _this.addTask];
        _this.addTask(_this.fn.bind(_this)).setConfig({
          args: args,
          includeInResults: false
        });
        if (!_this.parent) {
          return _this.run();
        }
      }
    });
    this.on('item.complete', function() {
      var args, item;

      item = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (item.includeInResults !== false) {
        _this.results.push(args);
      }
      if (args[0]) {
        _this.err = args[0];
      }
      if (_this.running > 0) {
        --_this.running;
      }
      if (_this.paused) {
        return;
      }
      if (!_this.complete()) {
        return _this.nextItems();
      }
    });
    this;
  }

  TaskGroup.prototype.setConfig = function(opts) {
    var key, value;

    if (opts == null) {
      opts = {};
    }
    for (key in opts) {
      if (!__hasProp.call(opts, key)) continue;
      value = opts[key];
      this[key] = value;
    }
    return this;
  };

  TaskGroup.prototype.getTotals = function() {
    var completed, remaining, running, total;

    running = this.running;
    remaining = this.remaining.length;
    completed = this.results.length;
    total = running + remaining + completed;
    return {
      running: running,
      remaining: remaining,
      completed: completed,
      total: total
    };
  };

  TaskGroup.prototype.addItem = function(item) {
    var me;

    me = this;
    item.onAny(function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return me.emit.apply(me, ["item." + this.event, item].concat(__slice.call(args)));
    });
    this.emit('add', item);
    this.remaining.push(item);
    if (!this.paused) {
      this.nextItems();
    }
    return item;
  };

  TaskGroup.prototype.createTask = function() {
    var args, task;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    task = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Task, args, function(){});
    return task;
  };

  TaskGroup.prototype.addTask = function() {
    var args, me, task;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    me = this;
    task = this.createTask.apply(this, args).setConfig({
      parent: this
    });
    task.onAny(function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return me.emit.apply(me, ["task." + this.event, task].concat(__slice.call(args)));
    });
    return this.addItem(task);
  };

  TaskGroup.prototype.createGroup = function() {
    var args, group;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    group = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(TaskGroup, args, function(){});
    return group;
  };

  TaskGroup.prototype.addGroup = function() {
    var args, group, me;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    me = this;
    group = this.createGroup.apply(this, args).setConfig({
      concurrency: this.concurrency,
      parent: this
    });
    group.onAny(function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return me.emit.apply(me, ["group." + this.event, group].concat(__slice.call(args)));
    });
    return this.addItem(group);
  };

  TaskGroup.prototype.hasItems = function() {
    return this.remaining.length !== 0;
  };

  TaskGroup.prototype.isReady = function() {
    return !this.concurrency || this.running < this.concurrency;
  };

  TaskGroup.prototype.nextItems = function() {
    var item, items;

    items = [];
    while (true) {
      item = this.nextItem();
      if (item) {
        items.push(item);
      } else {
        break;
      }
    }
    if (items.length) {
      return items;
    } else {
      return false;
    }
  };

  TaskGroup.prototype.nextItem = function() {
    var nextItem;

    if (this.hasItems()) {
      if (this.isReady()) {
        nextItem = this.remaining.shift();
        ++this.running;
        nextItem.run();
        return nextItem;
      }
    }
    return false;
  };

  TaskGroup.prototype.complete = function() {
    var completed, empty, pause;

    pause = this.pauseOnError && this.err;
    empty = this.hasItems() === false && this.running === 0;
    completed = pause || empty;
    if (completed) {
      if (pause) {
        this.pause();
      }
      this.emit('complete', this.err, this.results);
      this.err = null;
      this.results = [];
    }
    return completed;
  };

  TaskGroup.prototype.clear = function() {
    this.remaining.splice(0);
    return this;
  };

  TaskGroup.prototype.stop = function() {
    this.pause();
    this.clear();
    return this;
  };

  TaskGroup.prototype.exit = function(err) {
    if (err) {
      this.err = err;
    }
    this.stop();
    this.running = 0;
    this.complete();
    return this;
  };

  TaskGroup.prototype.pause = function() {
    this.paused = true;
    return this;
  };

  TaskGroup.prototype.run = function() {
    var args,
      _this = this;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.paused = false;
    this.emit('run');
    process.nextTick(function() {
      if (!_this.complete()) {
        return _this.nextItems();
      }
    });
    return this;
  };

  return TaskGroup;

})(EventEmitter);

module.exports = {
  Task: Task,
  TaskGroup: TaskGroup
};
