{
  "name": "taskgroup",
  "version": "3.1.2",
  "description": "Group together synchronous and asynchronous tasks and execute them with support for concurrency, naming, and nesting.",
  "homepage": "https://github.com/bevry/taskgroup",
  "keywords": [
    "flow",
    "control",
    "async",
    "sync",
    "tasks",
    "batch",
    "concurrency"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/taskgroup/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/taskgroup.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "ambi": "~2.0.0",
    "eventemitter2": "~0.4.11"
  },
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.2.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.5.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/taskgroup-test.js"
  },
  "main": "./out/lib/taskgroup.js",
  "readme": "# Task Group\n\n[![Build Status](https://secure.travis-ci.org/bevry/taskgroup.png?branch=master)](http://travis-ci.org/bevry/taskgroup)\n[![NPM version](https://badge.fury.io/js/taskgroup.png)](https://npmjs.org/package/taskgroup)\n\nGroup together synchronous and asynchronous tasks and execute them with support for concurrency, naming, and nesting.\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save taskgroup`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\n// Import\nvar TaskGroup = require('taskgroup').TaskGroup;\n\n// Create our new group\nvar group = new TaskGroup();\n\n// Define what should happen once the group has completed\ngroup.once('complete', function(err,results){\n\t// Log the error that has occured\n\tconsole.log(err);\n\t// => null\n\n\t// Log the results that our group received from the executing items\n\tconsole.log(JSON.stringify(results));\n\t/*\t=>\n\t\t[\n\t\t\t[null, 'first', 'task'],\n\t\t\t[null, 'second task'],\n\t\t\t[null, [\n\t\t\t\t[null, 'sub second task'],\n\t\t\t\t[null, 'sub first', 'task']\n\t\t\t]]\n\t\t]\n\t*/\n});\n\n// Add an asynchronous task that gives the result to the completion callback\ngroup.addTask(function(complete){\n\tsetTimeout(function(){\n\t\tcomplete(null, 'first', 'task');\n\t},500);\n});\n\n// Add a synchronous task that returns the result\n// Errors should be returned, though if an error is thrown we will catch it\ngroup.addTask(function(){\n\treturn 'second task';\n});\n\n// Add a sub-group to our exiting group\ngroup.addGroup(function(addGroup,addTask){\n\t// Tell this sub-group to execute in parallel (all at once) by setting its concurrency to unlimited\n\t// by default the concurrency for all groups is set to 1\n\t// which means that they execute in serial fashion (one after the other, instead of all at once)\n\tthis.setConfig({concurrency:0});\n\n\t// Add an asynchronous task that gives its result to the completion callback\n\taddTask(function(complete){\n\t\tsetTimeout(function(){\n\t\t\tcomplete(null, 'sub first', 'task');\n\t\t},500);\n\t});\n\n\t// Add a synchronous task that returns its result\n\taddTask(function(){\n\t\treturn 'sub second task';\n\t});\n});\n\n// Execute our group\ngroup.run();\n```\n\n### TaskGroup API\n\n``` javascript\nnew require('taskgroup').TaskGroup()\n```\n\n- Available methods:\n\t- `constructor(name?,fn?)` - create our new group, the arguments `name` and `fn` are optional, refer to their entries in configuration\n\t- `setConfig(config)` - set the configuration for the group, returns chain\n\t- `addTask(args...)` - create a new task item with the arguments and adds it to the group, returns the new task item\n\t- `addGroup(args...)` - create a new group item with the arguments and adds it to the group, returns the new group item\n\t- `getTotals()` - returns counts for the following `{running,remaining,completed,total}`\n\t- `clear()` - remove the remaining items to be executed\n\t- `pause()` - pause the execution of the items\n\t- `stop()` - clear and pause\n\t- `exit(err)` - stop and complete, `err` if specified is sent to the completion event when fired\n\t- `complete()` - will fire the completion event if we are already complete, useful if you're binding your listeners after run\n\t- `run()` - start/resume executing the items, returns chain\n\t- All those of [EventEmitter2](https://github.com/hij1nx/EventEmitter2)\n- Available configuration:\n\t- `name`, no default - allows us to assign a name to the group, useful for debugging\n\t- `fn(addGroup,addTask,complete?)`, no default - allows us to use an inline and self-executing style for defining groups, useful for nesting\n\t- `concurrency`, defaults to `1` - how many items shall we allow to be run at the same time, set to `0` to allow unlimited\n\t- `pauseOnError`, defaults to `true` - if an error occurs in one of our items, should we stop executing any remaining items?\n\t\t- setting to `false` will continue with execution with the other items even if an item experiences an error\n- Available events:\n\t- `run()` - fired just before we execute the items\n\t- `complete(err, results)` - fired when all our items have completed\n\t- `task.run(task)` - fired just before a task item executes\n\t- `task.complete(task, err, args...)` - fired when a task item has completed\n\t- `group.run(group)` - fired just before a group item executes\n\t- `group.complete(group, err, results)` - fired when a group item has completed\n\t- `item.run(item)` - fired just before an item executes (fired for both sub-tasks and sub-groups)\n\t- `item.complete(item, err, args...)` - fired when an item has completed (fired for both sub-task and sub-groups)\n\n\n### Task API\n\n``` javascript\nnew require('taskgroup').Task()\n```\n\n- Available methods:\n\t- `constructor(name?,fn?)` - create our new task, the arguments `name` and `fn` are optional though `fn` must be set at some point, refer to their entries in configuration\n\t- `setConfig(config)` - set the configuration for the group, returns chain\n\t- `complete()` - will fire the completion event if we are already complete, useful if you're binding your listeners after run\n\t- `run()` - execute the task\n- Available configuration:\n\t- `name`, no default - allows us to assign a name to the group, useful for debugging\n\t- `fn(complete?)`, no default - must be set at some point, it is the function to execute for the task, if it is asynchronous it should use the completion callback provided\n\t- `args`, no default - an array of arguments that you would like to precede the completion callback when executing `fn`\n- Available events:\n\t- `run()` - fired just before we execute the task\n\t- `complete(err, args...)` - fired when the task has completed\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/taskgroup/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "taskgroup@3.1.2",
  "_from": "taskgroup@~3.1.1"
}
